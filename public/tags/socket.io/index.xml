<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Socket.io on Ovieh Mosley</title>
    <link>https://ovieh.com/tags/socket.io/</link>
    <description>Recent content in Socket.io on Ovieh Mosley</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 26 Feb 2018 16:28:51 -0500</lastBuildDate>
    <atom:link href="https://ovieh.com/tags/socket.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Final Project</title>
      <link>https://ovieh.com/post/final-project/</link>
      <pubDate>Mon, 26 Feb 2018 16:28:51 -0500</pubDate>
      <guid>https://ovieh.com/post/final-project/</guid>
      <description>&lt;p&gt;The remaining three weeks of class were mainly devoted to the development of our final projects. In that time we we also covered React in more depth and went over some some Computer Science fundamental, data structure and algorithms.&lt;/p&gt;&#xA;&lt;p&gt;I am not quite sure why I am so fond of React. Perhaps it feels like it gives needed structure to the front-end. And adding even more structure, we covered Redux. &lt;a href=&#34;https://redux.js.org/&#34;&gt;Redux&lt;/a&gt; provides a predictable state container for JavaScript apps. What that means is that handles the state for your entire application, it provides a &lt;em&gt;single source of truth&lt;/em&gt;. For something that is relatively simple, it is difficult to grasp exactly why you would need or want to use Redux. Through abstraction it provides predictable methods of accessing and modifying state. I would go on to use it along with React in my groupâ€™s final project.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Weeks Sixteen &amp; Seventeen</title>
      <link>https://ovieh.com/post/week-sixteen-seventeen/</link>
      <pubDate>Wed, 20 Dec 2017 16:19:34 -0500</pubDate>
      <guid>https://ovieh.com/post/week-sixteen-seventeen/</guid>
      <description>&lt;p&gt;It has been a challenging last couple of weeks. We concurrently covered testing, both unit and functional, and completed our second group project. One of the toughest aspects of our group project is simply coming up with an idea for an application. We kicked around a few ideas, but eventually led drawing game, kind of like Pictionary, where one player has a clue and other player must guess what the drawer is, &lt;em&gt;drawing&lt;/em&gt;. We came across WebSockets, which allows for peer to peer communication between over TCP. This would allow us to share what the person is drawing on their Canvas. We used Socket.io, which implements WebSockets and ties in nicely with Node. Also using Socket.io, I implemented a chat function, which was also used as a method the messages that control the functions of the game.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
