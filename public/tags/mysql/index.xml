<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on Ovieh Mosley</title>
    <link>https://ovieh.com/tags/mysql/</link>
    <description>Recent content in MySQL on Ovieh Mosley</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 20 Dec 2017 16:19:34 -0500</lastBuildDate>
    <atom:link href="https://ovieh.com/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Weeks Sixteen &amp; Seventeen</title>
      <link>https://ovieh.com/post/week-sixteen-seventeen/</link>
      <pubDate>Wed, 20 Dec 2017 16:19:34 -0500</pubDate>
      <guid>https://ovieh.com/post/week-sixteen-seventeen/</guid>
      <description>&lt;p&gt;It has been a challenging last couple of weeks. We concurrently covered testing, both unit and functional, and completed our second group project. One of the toughest aspects of our group project is simply coming up with an idea for an application. We kicked around a few ideas, but eventually led drawing game, kind of like Pictionary, where one player has a clue and other player must guess what the drawer is, &lt;em&gt;drawing&lt;/em&gt;. We came across WebSockets, which allows for peer to peer communication between over TCP. This would allow us to share what the person is drawing on their Canvas. We used Socket.io, which implements WebSockets and ties in nicely with Node. Also using Socket.io, I implemented a chat function, which was also used as a method the messages that control the functions of the game.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Week Fifthteen</title>
      <link>https://ovieh.com/post/week-fifthteen/</link>
      <pubDate>Sun, 03 Dec 2017 15:15:40 -0500</pubDate>
      <guid>https://ovieh.com/post/week-fifthteen/</guid>
      <description>&lt;p&gt;This was a short week in terms of new material, as it was running concurrently with the planning of our second group project. We build off the knowledge we gained last week in building our own ORM, and used an off the shelf model, &lt;!-- raw HTML omitted --&gt;Sequelize&lt;!-- raw HTML omitted --&gt;. I found Sequelize itself to be pretty easy to use, since it is promise based. Dealing with callbacks can get messy. Our project this week was merely to refactor last week&amp;rsquo;s project, were we created are own ORM, using Sequelize.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Week Fourteen</title>
      <link>https://ovieh.com/post/week-fourteen/</link>
      <pubDate>Sun, 26 Nov 2017 10:20:22 -0500</pubDate>
      <guid>https://ovieh.com/post/week-fourteen/</guid>
      <description>&lt;p&gt;This week we dove deeper into Express and covered &lt;!-- raw HTML omitted --&gt;Handlebars.js&lt;!-- raw HTML omitted --&gt;, a html templating engine. HTML templating provides a bridge between our JavaScript and our content, allowing us to decouple our HTML structure of the data within. Handlebars provides pretty easy to understand syntax and even allows block expression. As an example, let say I had list of burgers I want to iterate through and add each burger as a list item, it would look like this:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Week Twelve</title>
      <link>https://ovieh.com/post/week-twelve/</link>
      <pubDate>Sat, 11 Nov 2017 21:47:12 -0500</pubDate>
      <guid>https://ovieh.com/post/week-twelve/</guid>
      <description>&lt;p&gt;This last week I became reaquainted with MySQL. Itâ€™s not so bad. The syntax is relatively straightforward. The keywords are close to to natural language. This was another week getting familiar with the power of Node.js. It is really easy to integrate some really powerful tools.&lt;/p&gt;&#xA;&lt;p&gt;Our assignment this week was to create backend for store using MySQL running on Node.js.Working with MySQL was pretty straightforward, updating, selecting from, and inserting into the database. The challenge I faced this week was dealing with asynchronous JavaScript. I found some of my function calls would sort of get take effect at the same time, or at some unforeseen time. I dealt with this my implementing callbacks. I am going to look into other ways of tackling this problem. The new hotness in ES7 is Async / Await, which offers solutions with asynchronous code. Async actually implements Promises, which was the last great hope with dealing with funny timing. So before I tackle async / await, I need to get a handle on promises.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
